--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_WIDTHA=10 LPM_WIDTHB=18 LPM_WIDTHP=28 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_mult 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_padd 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END


-- Copyright (C) 2021  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 253 
SUBDESIGN mult_rql
( 
	dataa[9..0]	:	input;
	datab[17..0]	:	input;
	result[27..0]	:	output;
) 
VARIABLE
	add10_result[30..0]	:	WIRE;
	add14_result[27..0]	:	WIRE;
	add18_result[24..0]	:	WIRE;
	add22_result[19..0]	:	WIRE;
	add26_result[14..0]	:	WIRE;
	add30_result[2..0]	:	WIRE;
	cs2a[5..0] : carry_sum;
	cs3a[5..0] : carry_sum;
	le4a[19..0] : lcell;
	le5a[19..0] : lcell;
	le6a[19..0] : lcell;
	le7a[19..0] : lcell;
	le8a[19..0] : lcell;
	le9a[18..0] : lcell;
	sft11a[30..0] : soft;
	sft12a[30..0] : soft;
	sft13a[30..0] : soft;
	sft15a[27..0] : soft;
	sft16a[27..0] : soft;
	sft17a[27..0] : soft;
	sft19a[24..0] : soft;
	sft20a[24..0] : soft;
	sft21a[24..0] : soft;
	sft23a[19..0] : soft;
	sft24a[19..0] : soft;
	sft25a[19..0] : soft;
	sft27a[14..0] : soft;
	sft28a[14..0] : soft;
	sft29a[14..0] : soft;
	sft31a[2..0] : soft;
	sft32a[2..0] : soft;
	sft33a[2..0] : soft;
	dataa_node[17..0]	: WIRE;
	datab_node[9..0]	: WIRE;
	final_result_node[27..0]	: WIRE;
	w140w[19..0]	: WIRE;
	w18w[11..0]	: WIRE;
	w215w[19..0]	: WIRE;
	w273w[19..0]	: WIRE;
	w347w[19..0]	: WIRE;
	w526w	: WIRE;
	w555w	: WIRE;
	w913w[30..0]	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add14_result[] = sft15a[].out + sft16a[].out;
	add18_result[] = sft19a[].out + sft20a[].out;
	add22_result[] = sft23a[].out + sft24a[].out;
	add26_result[] = sft27a[].out + sft28a[].out;
	add30_result[] = sft31a[].out + sft32a[].out;
	cs2a[].cin = ( ((w18w[10..10] & cs2a[4].cout) # w18w[11..11]), (cs2a[3].cout & w18w[8..8]), ((w18w[6..6] & cs2a[2].cout) # w18w[7..7]), ((w18w[4..4] & cs2a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs2a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs2a[].sin = ( ((((((! w18w[11..11]) & w18w[10..10]) & cs2a[4].cout) # ((w18w[11..11] & w18w[10..10]) & (! cs2a[4].cout))) # ((w18w[11..11] & (! w18w[10..10])) & cs2a[4].cout)) # ((w18w[11..11] & (! w18w[10..10])) & (! cs2a[4].cout))), (cs2a[3].cout & w18w[8..8]), ((((((! w18w[7..7]) & w18w[6..6]) & cs2a[2].cout) # ((w18w[7..7] & w18w[6..6]) & (! cs2a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs2a[2].cout)) # ((w18w[7..7] & (! w18w[6..6])) & (! cs2a[2].cout))), ((((((! w18w[5..5]) & w18w[4..4]) & cs2a[1].cout) # ((w18w[5..5] & w18w[4..4]) & (! cs2a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs2a[1].cout)) # ((w18w[5..5] & (! w18w[4..4])) & (! cs2a[1].cout))), ((((((! w18w[3..3]) & w18w[2..2]) & cs2a[0].cout) # ((w18w[3..3] & w18w[2..2]) & (! cs2a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs2a[0].cout)) # ((w18w[3..3] & (! w18w[2..2])) & (! cs2a[0].cout))), w18w[1..1]);
	cs3a[].cin = ( ((w18w[10..10] & cs3a[4].cout) # w18w[11..11]), (cs3a[3].cout $ w18w[8..8]), ((w18w[6..6] & cs3a[2].cout) # w18w[7..7]), ((w18w[4..4] & cs3a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs3a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs3a[].sin = ( ((((((! w18w[11..11]) & (! w18w[10..10])) & cs3a[4].cout) # (((! w18w[11..11]) & w18w[10..10]) & (! cs3a[4].cout))) # ((w18w[11..11] & w18w[10..10]) & (! cs3a[4].cout))) # ((w18w[11..11] & (! w18w[10..10])) & cs3a[4].cout)), (cs3a[3].cout $ w18w[8..8]), ((((((! w18w[7..7]) & (! w18w[6..6])) & cs3a[2].cout) # (((! w18w[7..7]) & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs3a[2].cout)), ((((((! w18w[5..5]) & (! w18w[4..4])) & cs3a[1].cout) # (((! w18w[5..5]) & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs3a[1].cout)), ((((((! w18w[3..3]) & (! w18w[2..2])) & cs3a[0].cout) # (((! w18w[3..3]) & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs3a[0].cout)), w18w[0..0]);
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[0].sout) & cs3a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[1].sout) & cs3a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[1].sout)) & cs3a[1].sout)))));
	le6a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[2].sout) & (! cs3a[2].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[2].sout) & cs3a[2].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[2].sout)) & cs3a[2].sout)))));
	le7a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[3].sout) & (! cs3a[3].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[3].sout) & cs3a[3].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[3].sout)) & cs3a[3].sout)))));
	le8a[].in = ((cs2a[4].sout & ( B"0", dataa_node[], B"0")) # (cs3a[4].sout & ( B"0", B"0", dataa_node[])));
	le9a[].in = (w18w[9..9] & ( B"0", dataa_node[]));
	sft11a[].in = ( w526w, ( w526w, ( sft17a[26..26].out, ( sft17a[25..25].out, ( sft17a[24..24].out, ( sft17a[23..23].out, ( sft17a[22..22].out, ( sft17a[21..21].out, ( sft17a[20..20].out, ( sft17a[19..19].out, ( sft17a[18..18].out, ( sft17a[17..17].out, ( sft17a[16..16].out, ( sft17a[15..15].out, ( sft17a[14..14].out, ( sft17a[13..13].out, ( sft17a[12..12].out, ( sft17a[11..11].out, ( sft17a[10..10].out, ( sft17a[9..9].out, ( sft17a[8..8].out, ( sft17a[7..7].out, ( sft17a[6..6].out, ( sft17a[5..5].out, ( sft17a[4..4].out, ( sft17a[3..3].out, ( sft17a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out))))))))))))))))))))))))))))));
	sft12a[].in = ( w555w, ( sft17a[27..27].out, ( sft21a[24..24].out, ( sft21a[23..23].out, ( sft21a[22..22].out, ( sft21a[21..21].out, ( sft21a[20..20].out, ( sft21a[19..19].out, ( sft21a[18..18].out, ( sft21a[17..17].out, ( sft21a[16..16].out, ( sft21a[15..15].out, ( sft21a[14..14].out, ( sft21a[13..13].out, ( sft21a[12..12].out, ( sft21a[11..11].out, ( sft21a[10..10].out, ( sft21a[9..9].out, ( sft21a[8..8].out, ( sft21a[7..7].out, ( sft21a[6..6].out, ( sft21a[5..5].out, ( sft21a[4..4].out, ( sft21a[3..3].out, ( sft21a[2..2].out, ( sft21a[1..1].out, ( sft21a[0..0].out, ( sft17a[1..1].out, ( sft17a[0..0].out, ( w555w, cs2a[0].sout))))))))))))))))))))))))))))));
	sft13a[].in = add10_result[];
	sft15a[].in = ( w555w, ( w526w, ( le9a[18..18].out, ( le9a[17..17].out, ( le9a[16..16].out, ( le9a[15..15].out, ( le9a[14..14].out, ( le9a[13..13].out, ( le9a[12..12].out, ( le9a[11..11].out, ( sft25a[13..13].out, ( le9a[9..9].out, ( le9a[8..8].out, ( le9a[7..7].out, ( le9a[6..6].out, ( le9a[5..5].out, ( le9a[4..4].out, ( le9a[3..3].out, ( le9a[2..2].out, ( le9a[1..1].out, ( le9a[0..0].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le4a[3..2].out)))))))))))))))))))))))))));
	sft16a[].in = ( w555w, ( w555w, ( le8a[19..19].out, ( le8a[18..18].out, ( le8a[17..17].out, ( sft25a[18..18].out, ( sft25a[17..17].out, ( sft25a[16..16].out, ( sft25a[15..15].out, ( sft25a[14..14].out, ( sft29a[10..10].out, ( sft25a[12..12].out, ( sft25a[11..11].out, ( sft25a[10..10].out, ( sft25a[9..9].out, ( sft25a[8..8].out, ( sft25a[7..7].out, ( sft25a[6..6].out, ( sft25a[5..5].out, ( sft25a[4..4].out, ( sft25a[3..3].out, ( sft25a[2..2].out, ( sft25a[1..1].out, ( sft25a[0..0].out, ( le5a[3..3].out, ( le5a[2..2].out, ( w555w, cs2a[1].sout)))))))))))))))))))))))))));
	sft17a[].in = add14_result[];
	sft19a[].in = ( w555w, ( w526w, ( w526w, ( (! w347w[19..19]), ( le8a[16..16].out, ( le8a[15..15].out, ( le8a[14..14].out, ( sft29a[12..12].out, ( sft29a[11..11].out, ( le9a[10..10].out, ( le8a[10..10].out, ( le8a[9..9].out, ( le8a[8..8].out, ( le8a[7..7].out, ( le8a[6..6].out, ( le8a[5..5].out, ( le8a[4..4].out, ( le8a[3..3].out, ( le8a[2..2].out, ( le8a[1..1].out, ( le7a[2..2].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le4a[5..5].out, cs2a[2].sout))))))))))))))))))))))));
	sft20a[].in = ( w555w, ( w555w, ( w555w, ( sft25a[19..19].out, ( le7a[18..18].out, ( sft29a[14..14].out, ( sft29a[13..13].out, ( sft33a[2..2].out, ( sft33a[1..1].out, ( sft33a[0..0].out, ( sft29a[9..9].out, ( sft29a[8..8].out, ( sft29a[7..7].out, ( sft29a[6..6].out, ( sft29a[5..5].out, ( sft29a[4..4].out, ( sft29a[3..3].out, ( sft29a[2..2].out, ( sft29a[1..1].out, ( sft29a[0..0].out, ( le6a[4..4].out, ( le5a[5..5].out, ( le5a[4..4].out, ( w555w, le4a[4..4].out))))))))))))))))))))))));
	sft21a[].in = add18_result[];
	sft23a[].in = ( w555w, ( w526w, ( le7a[17..17].out, ( le7a[16..16].out, ( le8a[13..13].out, ( le8a[12..12].out, ( le8a[11..11].out, ( le7a[12..12].out, ( le7a[11..11].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le7a[8..8].out, ( le7a[7..7].out, ( le7a[6..6].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le7a[3..3].out, ( le5a[6..6].out, ( le4a[7..6].out)))))))))))))))))));
	sft24a[].in = ( w555w, ( w555w, ( (! w273w[19..19]), ( le6a[18..18].out, ( le7a[15..15].out, ( le7a[14..14].out, ( le7a[13..13].out, ( le6a[14..14].out, ( le6a[13..13].out, ( le6a[12..12].out, ( le6a[11..11].out, ( le6a[10..10].out, ( le6a[9..9].out, ( le6a[8..8].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le6a[5..5].out, ( le4a[8..8].out, ( w555w, cs2a[3].sout)))))))))))))))))));
	sft25a[].in = add22_result[];
	sft27a[].in = ( w555w, ( w526w, ( le6a[17..17].out, ( le6a[16..16].out, ( le6a[15..15].out, ( le5a[16..16].out, ( le5a[15..15].out, ( le5a[14..14].out, ( le5a[13..13].out, ( le5a[12..12].out, ( le5a[11..11].out, ( le5a[10..10].out, ( le5a[9..9].out, ( le5a[8..7].out))))))))))))));
	sft28a[].in = ( w555w, ( w555w, ( (! w215w[19..19]), ( le5a[18..18].out, ( le5a[17..17].out, ( le4a[18..18].out, ( le4a[17..17].out, ( le4a[16..16].out, ( le4a[15..15].out, ( le4a[14..14].out, ( le4a[13..13].out, ( le4a[12..12].out, ( le4a[11..11].out, ( le4a[10..9].out))))))))))))));
	sft29a[].in = add26_result[];
	sft31a[].in = ( w555w, ( w526w, w526w));
	sft32a[].in = ( w555w, ( w555w, (! w140w[19..19])));
	sft33a[].in = add30_result[];
	dataa_node[] = ( datab[17..0]);
	datab_node[] = ( dataa[9..0]);
	final_result_node[] = ( w913w[27..0]);
	result[] = ( final_result_node[27..0]);
	w140w[] = le4a[].out;
	w18w[] = ( B"00", datab_node[]);
	w215w[] = le5a[].out;
	w273w[] = le6a[].out;
	w347w[] = le7a[].out;
	w526w = B"1";
	w555w = B"0";
	w913w[] = ( sft13a[30..29].out, sft13a[28..27].out, sft13a[26..25].out, sft13a[24..23].out, sft13a[22..21].out, sft13a[20..19].out, sft13a[18..17].out, sft13a[16..15].out, sft13a[14..13].out, sft13a[12..11].out, sft13a[10..9].out, sft13a[8..7].out, sft13a[6..5].out, sft13a[4..3].out, sft13a[2..1].out, sft13a[0..0].out);
END;
--VALID FILE
