--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_WIDTHA=14 LPM_WIDTHB=14 LPM_WIDTHP=28 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 21.1 cbx_cycloneii 2021:10:21:11:03:22:SJ cbx_lpm_add_sub 2021:10:21:11:03:22:SJ cbx_lpm_mult 2021:10:21:11:03:22:SJ cbx_mgl 2021:10:21:11:03:46:SJ cbx_nadder 2021:10:21:11:03:22:SJ cbx_padd 2021:10:21:11:03:22:SJ cbx_stratix 2021:10:21:11:03:22:SJ cbx_stratixii 2021:10:21:11:03:22:SJ cbx_util_mgl 2021:10:21:11:03:22:SJ  VERSION_END


-- Copyright (C) 2021  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 285 
SUBDESIGN mult_qql
( 
	dataa[13..0]	:	input;
	datab[13..0]	:	input;
	result[27..0]	:	output;
) 
VARIABLE
	add12_result[30..0]	:	WIRE;
	add16_result[27..0]	:	WIRE;
	add20_result[24..0]	:	WIRE;
	add24_result[19..0]	:	WIRE;
	add28_result[13..0]	:	WIRE;
	add32_result[9..0]	:	WIRE;
	add36_result[10..0]	:	WIRE;
	add40_result[2..0]	:	WIRE;
	cs2a[7..0] : carry_sum;
	cs3a[7..0] : carry_sum;
	le10a[15..0] : lcell;
	le11a[14..0] : lcell;
	le4a[15..0] : lcell;
	le5a[15..0] : lcell;
	le6a[15..0] : lcell;
	le7a[15..0] : lcell;
	le8a[15..0] : lcell;
	le9a[15..0] : lcell;
	sft13a[30..0] : soft;
	sft14a[30..0] : soft;
	sft15a[30..0] : soft;
	sft17a[27..0] : soft;
	sft18a[27..0] : soft;
	sft19a[27..0] : soft;
	sft21a[24..0] : soft;
	sft22a[24..0] : soft;
	sft23a[24..0] : soft;
	sft25a[19..0] : soft;
	sft26a[19..0] : soft;
	sft27a[19..0] : soft;
	sft29a[13..0] : soft;
	sft30a[13..0] : soft;
	sft31a[13..0] : soft;
	sft33a[9..0] : soft;
	sft34a[9..0] : soft;
	sft35a[9..0] : soft;
	sft37a[10..0] : soft;
	sft38a[10..0] : soft;
	sft39a[10..0] : soft;
	sft41a[2..0] : soft;
	sft42a[2..0] : soft;
	sft43a[2..0] : soft;
	dataa_node[13..0]	: WIRE;
	datab_node[13..0]	: WIRE;
	final_result_node[27..0]	: WIRE;
	w1123w[30..0]	: WIRE;
	w18w[15..0]	: WIRE;
	w196w[15..0]	: WIRE;
	w263w[15..0]	: WIRE;
	w317w[15..0]	: WIRE;
	w383w[15..0]	: WIRE;
	w449w[15..0]	: WIRE;
	w515w[15..0]	: WIRE;
	w670w	: WIRE;
	w709w	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add20_result[] = sft21a[].out + sft22a[].out;
	add24_result[] = sft25a[].out + sft26a[].out;
	add28_result[] = sft29a[].out + sft30a[].out;
	add32_result[] = sft33a[].out + sft34a[].out;
	add36_result[] = sft37a[].out + sft38a[].out;
	add40_result[] = sft41a[].out + sft42a[].out;
	cs2a[].cin = ( ((w18w[14..14] & cs2a[6].cout) # w18w[15..15]), (cs2a[5].cout & w18w[12..12]), ((w18w[10..10] & cs2a[4].cout) # w18w[11..11]), ((w18w[8..8] & cs2a[3].cout) # w18w[9..9]), ((w18w[6..6] & cs2a[2].cout) # w18w[7..7]), ((w18w[4..4] & cs2a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs2a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs2a[].sin = ( ((((((! w18w[15..15]) & w18w[14..14]) & cs2a[6].cout) # ((w18w[15..15] & w18w[14..14]) & (! cs2a[6].cout))) # ((w18w[15..15] & (! w18w[14..14])) & cs2a[6].cout)) # ((w18w[15..15] & (! w18w[14..14])) & (! cs2a[6].cout))), (cs2a[5].cout & w18w[12..12]), ((((((! w18w[11..11]) & w18w[10..10]) & cs2a[4].cout) # ((w18w[11..11] & w18w[10..10]) & (! cs2a[4].cout))) # ((w18w[11..11] & (! w18w[10..10])) & cs2a[4].cout)) # ((w18w[11..11] & (! w18w[10..10])) & (! cs2a[4].cout))), ((((((! w18w[9..9]) & w18w[8..8]) & cs2a[3].cout) # ((w18w[9..9] & w18w[8..8]) & (! cs2a[3].cout))) # ((w18w[9..9] & (! w18w[8..8])) & cs2a[3].cout)) # ((w18w[9..9] & (! w18w[8..8])) & (! cs2a[3].cout))), ((((((! w18w[7..7]) & w18w[6..6]) & cs2a[2].cout) # ((w18w[7..7] & w18w[6..6]) & (! cs2a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs2a[2].cout)) # ((w18w[7..7] & (! w18w[6..6])) & (! cs2a[2].cout))), ((((((! w18w[5..5]) & w18w[4..4]) & cs2a[1].cout) # ((w18w[5..5] & w18w[4..4]) & (! cs2a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs2a[1].cout)) # ((w18w[5..5] & (! w18w[4..4])) & (! cs2a[1].cout))), ((((((! w18w[3..3]) & w18w[2..2]) & cs2a[0].cout) # ((w18w[3..3] & w18w[2..2]) & (! cs2a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs2a[0].cout)) # ((w18w[3..3] & (! w18w[2..2])) & (! cs2a[0].cout))), w18w[1..1]);
	cs3a[].cin = ( ((w18w[14..14] & cs3a[6].cout) # w18w[15..15]), (cs3a[5].cout $ w18w[12..12]), ((w18w[10..10] & cs3a[4].cout) # w18w[11..11]), ((w18w[8..8] & cs3a[3].cout) # w18w[9..9]), ((w18w[6..6] & cs3a[2].cout) # w18w[7..7]), ((w18w[4..4] & cs3a[1].cout) # w18w[5..5]), ((w18w[2..2] & cs3a[0].cout) # w18w[3..3]), w18w[1..1]);
	cs3a[].sin = ( ((((((! w18w[15..15]) & (! w18w[14..14])) & cs3a[6].cout) # (((! w18w[15..15]) & w18w[14..14]) & (! cs3a[6].cout))) # ((w18w[15..15] & w18w[14..14]) & (! cs3a[6].cout))) # ((w18w[15..15] & (! w18w[14..14])) & cs3a[6].cout)), (cs3a[5].cout $ w18w[12..12]), ((((((! w18w[11..11]) & (! w18w[10..10])) & cs3a[4].cout) # (((! w18w[11..11]) & w18w[10..10]) & (! cs3a[4].cout))) # ((w18w[11..11] & w18w[10..10]) & (! cs3a[4].cout))) # ((w18w[11..11] & (! w18w[10..10])) & cs3a[4].cout)), ((((((! w18w[9..9]) & (! w18w[8..8])) & cs3a[3].cout) # (((! w18w[9..9]) & w18w[8..8]) & (! cs3a[3].cout))) # ((w18w[9..9] & w18w[8..8]) & (! cs3a[3].cout))) # ((w18w[9..9] & (! w18w[8..8])) & cs3a[3].cout)), ((((((! w18w[7..7]) & (! w18w[6..6])) & cs3a[2].cout) # (((! w18w[7..7]) & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & w18w[6..6]) & (! cs3a[2].cout))) # ((w18w[7..7] & (! w18w[6..6])) & cs3a[2].cout)), ((((((! w18w[5..5]) & (! w18w[4..4])) & cs3a[1].cout) # (((! w18w[5..5]) & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & w18w[4..4]) & (! cs3a[1].cout))) # ((w18w[5..5] & (! w18w[4..4])) & cs3a[1].cout)), ((((((! w18w[3..3]) & (! w18w[2..2])) & cs3a[0].cout) # (((! w18w[3..3]) & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & w18w[2..2]) & (! cs3a[0].cout))) # ((w18w[3..3] & (! w18w[2..2])) & cs3a[0].cout)), w18w[0..0]);
	le10a[].in = ((cs2a[6].sout & ( B"0", dataa_node[], B"0")) # (cs3a[6].sout & ( B"0", B"0", dataa_node[])));
	le11a[].in = (w18w[13..13] & ( B"0", dataa_node[]));
	le4a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[0].sout) & cs3a[0].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[0].sout)) & cs3a[0].sout)))));
	le5a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[1].sout) & (! cs3a[1].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[1].sout) & cs3a[1].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[1].sout)) & cs3a[1].sout)))));
	le6a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[2].sout) & (! cs3a[2].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[2].sout) & cs3a[2].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[2].sout)) & cs3a[2].sout)))));
	le7a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[3].sout) & (! cs3a[3].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[3].sout) & cs3a[3].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[3].sout)) & cs3a[3].sout)))));
	le8a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[4].sout) & (! cs3a[4].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[4].sout) & cs3a[4].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[4].sout)) & cs3a[4].sout)))));
	le9a[].in = (! ((! (((! ( B"0", dataa_node[], B"0")) & cs2a[5].sout) & (! cs3a[5].sout))) & (! ((((! ( B"0", B"0", dataa_node[])) & cs2a[5].sout) & cs3a[5].sout) # ((( B"0", B"0", dataa_node[]) & (! cs2a[5].sout)) & cs3a[5].sout)))));
	sft13a[].in = ( w670w, ( w670w, ( sft19a[26..26].out, ( sft19a[25..25].out, ( sft19a[24..24].out, ( sft19a[23..23].out, ( sft19a[22..22].out, ( sft19a[21..21].out, ( sft19a[20..20].out, ( sft19a[19..19].out, ( sft19a[18..18].out, ( sft19a[17..17].out, ( sft19a[16..16].out, ( sft19a[15..15].out, ( sft19a[14..14].out, ( sft19a[13..13].out, ( sft19a[12..12].out, ( sft19a[11..11].out, ( sft19a[10..10].out, ( sft19a[9..9].out, ( sft19a[8..8].out, ( sft19a[7..7].out, ( sft19a[6..6].out, ( sft19a[5..5].out, ( sft19a[4..4].out, ( sft19a[3..3].out, ( sft19a[2..2].out, ( le5a[1..1].out, ( le5a[0..0].out, ( le4a[1..0].out))))))))))))))))))))))))))))));
	sft14a[].in = ( w709w, ( sft19a[27..27].out, ( sft23a[24..24].out, ( sft23a[23..23].out, ( sft23a[22..22].out, ( sft23a[21..21].out, ( sft23a[20..20].out, ( sft23a[19..19].out, ( sft23a[18..18].out, ( sft23a[17..17].out, ( sft23a[16..16].out, ( sft23a[15..15].out, ( sft23a[14..14].out, ( sft23a[13..13].out, ( sft23a[12..12].out, ( sft23a[11..11].out, ( sft23a[10..10].out, ( sft23a[9..9].out, ( sft23a[8..8].out, ( sft23a[7..7].out, ( sft23a[6..6].out, ( sft23a[5..5].out, ( sft23a[4..4].out, ( sft23a[3..3].out, ( sft23a[2..2].out, ( sft23a[1..1].out, ( sft23a[0..0].out, ( sft19a[1..1].out, ( sft19a[0..0].out, ( w709w, cs2a[0].sout))))))))))))))))))))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w709w, ( w670w, ( le11a[14..14].out, ( le11a[13..13].out, ( le11a[12..12].out, ( le11a[11..11].out, ( le11a[10..10].out, ( le11a[9..9].out, ( le11a[8..8].out, ( le11a[7..7].out, ( sft27a[13..13].out, ( sft27a[12..12].out, ( sft27a[11..11].out, ( sft27a[10..10].out, ( sft27a[9..9].out, ( sft27a[8..8].out, ( sft27a[7..7].out, ( sft27a[6..6].out, ( le9a[1..1].out, ( sft27a[4..4].out, ( le8a[1..1].out, ( le8a[0..0].out, ( le7a[1..1].out, ( le7a[0..0].out, ( le6a[1..1].out, ( le6a[0..0].out, ( le4a[3..2].out)))))))))))))))))))))))))));
	sft18a[].in = ( w709w, ( w709w, ( le10a[15..15].out, ( le10a[14..14].out, ( le10a[13..13].out, ( sft27a[18..18].out, ( sft27a[17..17].out, ( sft27a[16..16].out, ( sft27a[15..15].out, ( sft27a[14..14].out, ( sft39a[6..6].out, ( sft31a[10..10].out, ( sft31a[9..9].out, ( sft31a[8..8].out, ( sft31a[7..7].out, ( sft31a[6..6].out, ( sft31a[5..5].out, ( sft31a[4..4].out, ( sft27a[5..5].out, ( sft31a[2..2].out, ( sft27a[3..3].out, ( sft27a[2..2].out, ( sft27a[1..1].out, ( sft27a[0..0].out, ( le5a[3..3].out, ( le5a[2..2].out, ( w709w, cs2a[1].sout)))))))))))))))))))))))))));
	sft19a[].in = add16_result[];
	sft21a[].in = ( w709w, ( w670w, ( w670w, ( (! w515w[15..15]), ( le10a[12..12].out, ( le10a[11..11].out, ( le10a[10..10].out, ( sft39a[8..8].out, ( sft39a[7..7].out, ( sft31a[11..11].out, ( sft35a[8..8].out, ( sft35a[7..7].out, ( sft35a[6..6].out, ( sft35a[5..5].out, ( sft35a[4..4].out, ( sft35a[3..3].out, ( le10a[0..0].out, ( sft31a[3..3].out, ( le9a[0..0].out, ( le7a[3..3].out, ( le7a[2..2].out, ( le6a[3..3].out, ( le6a[2..2].out, ( le4a[5..5].out, cs2a[2].sout))))))))))))))))))))))));
	sft22a[].in = ( w709w, ( w709w, ( w709w, ( sft27a[19..19].out, ( le9a[14..14].out, ( sft39a[10..10].out, ( sft39a[9..9].out, ( sft31a[13..13].out, ( sft31a[12..12].out, ( sft35a[9..9].out, ( sft39a[5..5].out, ( sft39a[4..4].out, ( sft39a[3..3].out, ( sft39a[2..2].out, ( sft39a[1..1].out, ( sft39a[0..0].out, ( sft35a[2..2].out, ( sft35a[1..1].out, ( sft35a[0..0].out, ( sft31a[1..1].out, ( sft31a[0..0].out, ( le5a[5..5].out, ( le5a[4..4].out, ( w709w, le4a[4..4].out))))))))))))))))))))))));
	sft23a[].in = add20_result[];
	sft25a[].in = ( w709w, ( w670w, ( le9a[13..13].out, ( le9a[12..12].out, ( le10a[9..9].out, ( le10a[8..8].out, ( le11a[6..6].out, ( le11a[5..5].out, ( le11a[4..4].out, ( le11a[3..3].out, ( le11a[2..2].out, ( le11a[1..1].out, ( le11a[0..0].out, ( le9a[2..2].out, ( le8a[3..3].out, ( le8a[2..2].out, ( le6a[5..5].out, ( le6a[4..4].out, ( le4a[7..6].out)))))))))))))))))));
	sft26a[].in = ( w709w, ( w709w, ( (! w449w[15..15]), ( le8a[14..14].out, ( le9a[11..11].out, ( le9a[10..10].out, ( le10a[7..7].out, ( le10a[6..6].out, ( le10a[5..5].out, ( sft43a[1..1].out, ( sft43a[0..0].out, ( le10a[2..2].out, ( le10a[1..1].out, ( le8a[4..4].out, ( le7a[5..5].out, ( le7a[4..4].out, ( le5a[7..7].out, ( le5a[6..6].out, ( w709w, cs2a[3].sout)))))))))))))))))));
	sft27a[].in = add24_result[];
	sft29a[].in = ( w709w, ( w670w, ( le7a[13..13].out, ( le9a[8..8].out, ( le9a[7..7].out, ( le10a[4..4].out, ( le10a[3..3].out, ( le9a[4..4].out, ( le9a[3..3].out, ( le7a[6..6].out, ( le6a[7..7].out, ( le6a[6..6].out, ( le4a[9..9].out, cs2a[4].sout)))))))))))));
	sft30a[].in = ( w709w, ( w709w, ( (! w317w[15..15]), ( le8a[10..10].out, ( le8a[9..9].out, ( le9a[6..6].out, ( le9a[5..5].out, ( le8a[6..6].out, ( le8a[5..5].out, ( le6a[8..8].out, ( le5a[9..9].out, ( le5a[8..8].out, ( w709w, le4a[8..8].out)))))))))))));
	sft31a[].in = add28_result[];
	sft33a[].in = ( w709w, ( le7a[12..12].out, ( le7a[11..11].out, ( le8a[8..8].out, ( le8a[7..7].out, ( le7a[8..8].out, ( le7a[7..7].out, ( le5a[10..10].out, ( le4a[11..11].out, cs2a[5].sout)))))))));
	sft34a[].in = ( w709w, ( le6a[14..14].out, ( le6a[13..13].out, ( le7a[10..10].out, ( le7a[9..9].out, ( le6a[10..10].out, ( le6a[9..9].out, ( le4a[12..12].out, ( w709w, le4a[10..10].out)))))))));
	sft35a[].in = add32_result[];
	sft37a[].in = ( w709w, ( w670w, ( le8a[13..13].out, ( le8a[12..12].out, ( le9a[9..9].out, ( w670w, ( (! w263w[15..15]), ( le6a[12..12].out, ( le6a[11..11].out, ( le5a[12..11].out))))))))));
	sft38a[].in = ( w709w, ( w709w, ( (! w383w[15..15]), ( le7a[14..14].out, ( le8a[11..11].out, ( w709w, ( sft43a[2..2].out, ( le5a[14..14].out, ( le5a[13..13].out, ( le4a[14..13].out))))))))));
	sft39a[].in = add36_result[];
	sft41a[].in = ( w709w, ( w670w, (! w196w[15..15])));
	sft42a[].in = ( w709w, ( w709w, w670w));
	sft43a[].in = add40_result[];
	dataa_node[] = ( dataa[13..0]);
	datab_node[] = ( datab[13..0]);
	final_result_node[] = ( w1123w[27..0]);
	result[] = ( final_result_node[27..0]);
	w1123w[] = ( sft15a[30..29].out, sft15a[28..27].out, sft15a[26..25].out, sft15a[24..23].out, sft15a[22..21].out, sft15a[20..19].out, sft15a[18..17].out, sft15a[16..15].out, sft15a[14..13].out, sft15a[12..11].out, sft15a[10..9].out, sft15a[8..7].out, sft15a[6..5].out, sft15a[4..3].out, sft15a[2..1].out, sft15a[0..0].out);
	w18w[] = ( B"00", datab_node[]);
	w196w[] = le4a[].out;
	w263w[] = le5a[].out;
	w317w[] = le6a[].out;
	w383w[] = le7a[].out;
	w449w[] = le8a[].out;
	w515w[] = le9a[].out;
	w670w = B"1";
	w709w = B"0";
END;
--VALID FILE
